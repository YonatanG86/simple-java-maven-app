name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Debug - Verify workspace files
      - name: Verify workspace files
        run: ls -R

      # Step 3: Set up Java and Maven
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Set up Maven
        uses: s4u/setup-maven-action@v1.17.0

      # Step 4: Increment the Patch Version
      - name: Configure Git
        run: |
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git config --global user.email "yonatangr86@gmail.com"
          git remote set-url origin https://${{ secrets.GIT_USERNAME }}:${{ secrets.GIT_TOKEN }}@github.com/YOUR_USERNAME/YOUR_REPOSITORY.git

      - name: Prepare Maven Release
        run: mvn release:prepare -DreleaseVersion=1.0.0 -DdevelopmentVersion=1.1.0-SNAPSHOT -DscmCommentPrefix="[Release] " -B -DpushChanges=false

      - name: Perform Maven Release
        run: mvn release:perform -B

      # Step 5: Build the application
      - name: Build with Maven
        run: mvn clean package

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: Build and Push Docker Image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:latest

      # Step 8: Deploy and Test
      - name: Deploy and Test
        run: |
          # Run the container
          CONTAINER_ID=$(docker run -d ygsol86/simple-java-maven-app:latest)

          # Wait a moment for the container to start
          sleep 2

          # Check the logs to verify the output
          if docker logs $CONTAINER_ID | grep -q "Hello World!"; then
            echo "Application printed 'Hello World!' successfully."
          else
            echo "Application did not print 'Hello World!'."
            docker logs $CONTAINER_ID
            exit 1
          fi

          # Stop and remove the container
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID
